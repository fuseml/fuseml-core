// Code generated by goa v3.3.1, DO NOT EDIT.
//
// workflow HTTP server types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package server

import (
	workflow "github.com/fuseml/fuseml-core/gen/workflow"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "workflow" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputRequestBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputRequestBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepRequestBody `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// ListResponseBody is the type of the "workflow" service "list" endpoint HTTP
// response body.
type ListResponseBody []*WorkflowResponse

// RegisterResponseBody is the type of the "workflow" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name string `form:"name" json:"name" xml:"name"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepResponseBody `form:"steps" json:"steps" xml:"steps"`
}

// GetResponseBody is the type of the "workflow" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name string `form:"name" json:"name" xml:"name"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepResponseBody `form:"steps" json:"steps" xml:"steps"`
}

// ListNotFoundResponseBody is the type of the "workflow" service "list"
// endpoint HTTP response body for the "NotFound" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RegisterBadRequestResponseBody is the type of the "workflow" service
// "register" endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBadRequestResponseBody is the type of the "workflow" service "get"
// endpoint HTTP response body for the "BadRequest" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "workflow" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WorkflowResponse is used to define fields on response body types.
type WorkflowResponse struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name string `form:"name" json:"name" xml:"name"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputResponse `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputResponse `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepResponse `form:"steps" json:"steps" xml:"steps"`
}

// WorkflowInputResponse is used to define fields on response body types.
type WorkflowInputResponse struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the input
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The type of the input (codeset, string, ...)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Default value for the input
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	// Labels associated with the input
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// WorkflowOutputResponse is used to define fields on response body types.
type WorkflowOutputResponse struct {
	// Name of the output
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the output
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The data type of the output
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// WorkflowStepResponse is used to define fields on response body types.
type WorkflowStepResponse struct {
	// The name of the step
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The image used to execute the step
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs for the step
	Inputs []*WorkflowStepInputResponse `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of output from the step
	Outputs []*WorkflowStepOutputResponse `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// List of environment variables available for the container running the step
	Env []*StepEnvResponse `form:"env,omitempty" json:"env,omitempty" xml:"env,omitempty"`
}

// WorkflowStepInputResponse is used to define fields on response body types.
type WorkflowStepInputResponse struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value of the input
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Codeset associated with the input
	Codeset *StepInputCodesetResponse `form:"codeset,omitempty" json:"codeset,omitempty" xml:"codeset,omitempty"`
}

// StepInputCodesetResponse is used to define fields on response body types.
type StepInputCodesetResponse struct {
	// Name or ID of the codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Path where the codeset will be mounted inside the container running the step
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// WorkflowStepOutputResponse is used to define fields on response body types.
type WorkflowStepOutputResponse struct {
	// Name of the variable to hold the step output value
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If the step builds a container image as output it will be referenced as
	// 'image'
	Image *StepOutputImageResponse `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// StepOutputImageResponse is used to define fields on response body types.
type StepOutputImageResponse struct {
	// Path to the Dockerfile used to build the image
	Dockerfile *string `form:"dockerfile,omitempty" json:"dockerfile,omitempty" xml:"dockerfile,omitempty"`
	// Name of the image, including the repository where the image will be stored
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StepEnvResponse is used to define fields on response body types.
type StepEnvResponse struct {
	// Name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value to set for the enviroment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WorkflowInputResponseBody is used to define fields on response body types.
type WorkflowInputResponseBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the input
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The type of the input (codeset, string, ...)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Default value for the input
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	// Labels associated with the input
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// WorkflowOutputResponseBody is used to define fields on response body types.
type WorkflowOutputResponseBody struct {
	// Name of the output
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the output
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The data type of the output
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// WorkflowStepResponseBody is used to define fields on response body types.
type WorkflowStepResponseBody struct {
	// The name of the step
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The image used to execute the step
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs for the step
	Inputs []*WorkflowStepInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of output from the step
	Outputs []*WorkflowStepOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// List of environment variables available for the container running the step
	Env []*StepEnvResponseBody `form:"env,omitempty" json:"env,omitempty" xml:"env,omitempty"`
}

// WorkflowStepInputResponseBody is used to define fields on response body
// types.
type WorkflowStepInputResponseBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value of the input
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Codeset associated with the input
	Codeset *StepInputCodesetResponseBody `form:"codeset,omitempty" json:"codeset,omitempty" xml:"codeset,omitempty"`
}

// StepInputCodesetResponseBody is used to define fields on response body types.
type StepInputCodesetResponseBody struct {
	// Name or ID of the codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Path where the codeset will be mounted inside the container running the step
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// WorkflowStepOutputResponseBody is used to define fields on response body
// types.
type WorkflowStepOutputResponseBody struct {
	// Name of the variable to hold the step output value
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If the step builds a container image as output it will be referenced as
	// 'image'
	Image *StepOutputImageResponseBody `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// StepOutputImageResponseBody is used to define fields on response body types.
type StepOutputImageResponseBody struct {
	// Path to the Dockerfile used to build the image
	Dockerfile *string `form:"dockerfile,omitempty" json:"dockerfile,omitempty" xml:"dockerfile,omitempty"`
	// Name of the image, including the repository where the image will be stored
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StepEnvResponseBody is used to define fields on response body types.
type StepEnvResponseBody struct {
	// Name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value to set for the enviroment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WorkflowInputRequestBody is used to define fields on request body types.
type WorkflowInputRequestBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the input
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The type of the input (codeset, string, ...)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Default value for the input
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	// Labels associated with the input
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// WorkflowOutputRequestBody is used to define fields on request body types.
type WorkflowOutputRequestBody struct {
	// Name of the output
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the output
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The data type of the output
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// WorkflowStepRequestBody is used to define fields on request body types.
type WorkflowStepRequestBody struct {
	// The name of the step
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The image used to execute the step
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs for the step
	Inputs []*WorkflowStepInputRequestBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of output from the step
	Outputs []*WorkflowStepOutputRequestBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// List of environment variables available for the container running the step
	Env []*StepEnvRequestBody `form:"env,omitempty" json:"env,omitempty" xml:"env,omitempty"`
}

// WorkflowStepInputRequestBody is used to define fields on request body types.
type WorkflowStepInputRequestBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value of the input
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Codeset associated with the input
	Codeset *StepInputCodesetRequestBody `form:"codeset,omitempty" json:"codeset,omitempty" xml:"codeset,omitempty"`
}

// StepInputCodesetRequestBody is used to define fields on request body types.
type StepInputCodesetRequestBody struct {
	// Name or ID of the codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Path where the codeset will be mounted inside the container running the step
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// WorkflowStepOutputRequestBody is used to define fields on request body types.
type WorkflowStepOutputRequestBody struct {
	// Name of the variable to hold the step output value
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If the step builds a container image as output it will be referenced as
	// 'image'
	Image *StepOutputImageRequestBody `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// StepOutputImageRequestBody is used to define fields on request body types.
type StepOutputImageRequestBody struct {
	// Path to the Dockerfile used to build the image
	Dockerfile *string `form:"dockerfile,omitempty" json:"dockerfile,omitempty" xml:"dockerfile,omitempty"`
	// Name of the image, including the repository where the image will be stored
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StepEnvRequestBody is used to define fields on request body types.
type StepEnvRequestBody struct {
	// Name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value to set for the enviroment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "workflow" service.
func NewListResponseBody(res []*workflow.Workflow) ListResponseBody {
	body := make([]*WorkflowResponse, len(res))
	for i, val := range res {
		body[i] = marshalWorkflowWorkflowToWorkflowResponse(val)
	}
	return body
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "workflow" service.
func NewRegisterResponseBody(res *workflow.Workflow) *RegisterResponseBody {
	body := &RegisterResponseBody{
		ID:          res.ID,
		Created:     res.Created,
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Inputs != nil {
		body.Inputs = make([]*WorkflowInputResponseBody, len(res.Inputs))
		for i, val := range res.Inputs {
			body.Inputs[i] = marshalWorkflowWorkflowInputToWorkflowInputResponseBody(val)
		}
	}
	if res.Outputs != nil {
		body.Outputs = make([]*WorkflowOutputResponseBody, len(res.Outputs))
		for i, val := range res.Outputs {
			body.Outputs[i] = marshalWorkflowWorkflowOutputToWorkflowOutputResponseBody(val)
		}
	}
	if res.Steps != nil {
		body.Steps = make([]*WorkflowStepResponseBody, len(res.Steps))
		for i, val := range res.Steps {
			body.Steps[i] = marshalWorkflowWorkflowStepToWorkflowStepResponseBody(val)
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "workflow" service.
func NewGetResponseBody(res *workflow.Workflow) *GetResponseBody {
	body := &GetResponseBody{
		ID:          res.ID,
		Created:     res.Created,
		Name:        res.Name,
		Description: res.Description,
	}
	if res.Inputs != nil {
		body.Inputs = make([]*WorkflowInputResponseBody, len(res.Inputs))
		for i, val := range res.Inputs {
			body.Inputs[i] = marshalWorkflowWorkflowInputToWorkflowInputResponseBody(val)
		}
	}
	if res.Outputs != nil {
		body.Outputs = make([]*WorkflowOutputResponseBody, len(res.Outputs))
		for i, val := range res.Outputs {
			body.Outputs[i] = marshalWorkflowWorkflowOutputToWorkflowOutputResponseBody(val)
		}
	}
	if res.Steps != nil {
		body.Steps = make([]*WorkflowStepResponseBody, len(res.Steps))
		for i, val := range res.Steps {
			body.Steps[i] = marshalWorkflowWorkflowStepToWorkflowStepResponseBody(val)
		}
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "workflow" service.
func NewListNotFoundResponseBody(res *goa.ServiceError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRegisterBadRequestResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "workflow" service.
func NewRegisterBadRequestResponseBody(res *goa.ServiceError) *RegisterBadRequestResponseBody {
	body := &RegisterBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "workflow" service.
func NewGetBadRequestResponseBody(res *goa.ServiceError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "workflow" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a workflow service list endpoint payload.
func NewListPayload(name *string) *workflow.ListPayload {
	v := &workflow.ListPayload{}
	v.Name = name

	return v
}

// NewRegisterWorkflow builds a workflow service register endpoint payload.
func NewRegisterWorkflow(body *RegisterRequestBody) *workflow.Workflow {
	v := &workflow.Workflow{
		ID:          body.ID,
		Created:     body.Created,
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.Inputs != nil {
		v.Inputs = make([]*workflow.WorkflowInput, len(body.Inputs))
		for i, val := range body.Inputs {
			v.Inputs[i] = unmarshalWorkflowInputRequestBodyToWorkflowWorkflowInput(val)
		}
	}
	if body.Outputs != nil {
		v.Outputs = make([]*workflow.WorkflowOutput, len(body.Outputs))
		for i, val := range body.Outputs {
			v.Outputs[i] = unmarshalWorkflowOutputRequestBodyToWorkflowWorkflowOutput(val)
		}
	}
	v.Steps = make([]*workflow.WorkflowStep, len(body.Steps))
	for i, val := range body.Steps {
		v.Steps[i] = unmarshalWorkflowStepRequestBodyToWorkflowWorkflowStep(val)
	}

	return v
}

// NewGetPayload builds a workflow service get endpoint payload.
func NewGetPayload(workflowNameOrID string) *workflow.GetPayload {
	v := &workflow.GetPayload{}
	v.WorkflowNameOrID = workflowNameOrID

	return v
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	return
}
