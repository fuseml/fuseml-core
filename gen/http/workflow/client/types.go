// Code generated by goa v3.3.1, DO NOT EDIT.
//
// workflow HTTP client types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	workflow "github.com/fuseml/fuseml-core/gen/workflow"
	goa "goa.design/goa/v3/pkg"
)

// RegisterRequestBody is the type of the "workflow" service "register"
// endpoint HTTP request body.
type RegisterRequestBody struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name string `form:"name" json:"name" xml:"name"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputRequestBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputRequestBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepRequestBody `form:"steps" json:"steps" xml:"steps"`
}

// ListResponseBody is the type of the "workflow" service "list" endpoint HTTP
// response body.
type ListResponseBody []*WorkflowResponse

// RegisterResponseBody is the type of the "workflow" service "register"
// endpoint HTTP response body.
type RegisterResponseBody struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepResponseBody `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// GetResponseBody is the type of the "workflow" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepResponseBody `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// ListNotFoundResponseBody is the type of the "workflow" service "list"
// endpoint HTTP response body for the "NotFound" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RegisterBadRequestResponseBody is the type of the "workflow" service
// "register" endpoint HTTP response body for the "BadRequest" error.
type RegisterBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBadRequestResponseBody is the type of the "workflow" service "get"
// endpoint HTTP response body for the "BadRequest" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetNotFoundResponseBody is the type of the "workflow" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// WorkflowResponse is used to define fields on response body types.
type WorkflowResponse struct {
	// The ID of the workflow
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The workflow creation time
	Created *string `form:"created,omitempty" json:"created,omitempty" xml:"created,omitempty"`
	// Name of the workflow
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description for the workflow
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Inputs for the workflow
	Inputs []*WorkflowInputResponse `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// Outputs from the workflow
	Outputs []*WorkflowOutputResponse `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// Steps to be executed by the workflow
	Steps []*WorkflowStepResponse `form:"steps,omitempty" json:"steps,omitempty" xml:"steps,omitempty"`
}

// WorkflowInputResponse is used to define fields on response body types.
type WorkflowInputResponse struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the input
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The type of the input (codeset, string, ...)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Default value for the input
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	// Labels associated with the input
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// WorkflowOutputResponse is used to define fields on response body types.
type WorkflowOutputResponse struct {
	// Name of the output
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the output
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The data type of the output
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// WorkflowStepResponse is used to define fields on response body types.
type WorkflowStepResponse struct {
	// The name of the step
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The image used to execute the step
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs for the step
	Inputs []*WorkflowStepInputResponse `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of output from the step
	Outputs []*WorkflowStepOutputResponse `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// List of environment variables available for the container running the step
	Env []*StepEnvResponse `form:"env,omitempty" json:"env,omitempty" xml:"env,omitempty"`
}

// WorkflowStepInputResponse is used to define fields on response body types.
type WorkflowStepInputResponse struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value of the input
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Codeset associated with the input
	Codeset *StepInputCodesetResponse `form:"codeset,omitempty" json:"codeset,omitempty" xml:"codeset,omitempty"`
}

// StepInputCodesetResponse is used to define fields on response body types.
type StepInputCodesetResponse struct {
	// Name or ID of the codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Path where the codeset will be mounted inside the container running the step
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// WorkflowStepOutputResponse is used to define fields on response body types.
type WorkflowStepOutputResponse struct {
	// Name of the variable to hold the step output value
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If the step builds a container image as output it will be referenced as
	// 'image'
	Image *StepOutputImageResponse `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// StepOutputImageResponse is used to define fields on response body types.
type StepOutputImageResponse struct {
	// Path to the Dockerfile used to build the image
	Dockerfile *string `form:"dockerfile,omitempty" json:"dockerfile,omitempty" xml:"dockerfile,omitempty"`
	// Name of the image, including the repository where the image will be stored
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StepEnvResponse is used to define fields on response body types.
type StepEnvResponse struct {
	// Name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value to set for the enviroment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WorkflowInputRequestBody is used to define fields on request body types.
type WorkflowInputRequestBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the input
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The type of the input (codeset, string, ...)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Default value for the input
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	// Labels associated with the input
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// WorkflowOutputRequestBody is used to define fields on request body types.
type WorkflowOutputRequestBody struct {
	// Name of the output
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the output
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The data type of the output
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// WorkflowStepRequestBody is used to define fields on request body types.
type WorkflowStepRequestBody struct {
	// The name of the step
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The image used to execute the step
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs for the step
	Inputs []*WorkflowStepInputRequestBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of output from the step
	Outputs []*WorkflowStepOutputRequestBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// List of environment variables available for the container running the step
	Env []*StepEnvRequestBody `form:"env,omitempty" json:"env,omitempty" xml:"env,omitempty"`
}

// WorkflowStepInputRequestBody is used to define fields on request body types.
type WorkflowStepInputRequestBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value of the input
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Codeset associated with the input
	Codeset *StepInputCodesetRequestBody `form:"codeset,omitempty" json:"codeset,omitempty" xml:"codeset,omitempty"`
}

// StepInputCodesetRequestBody is used to define fields on request body types.
type StepInputCodesetRequestBody struct {
	// Name or ID of the codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Path where the codeset will be mounted inside the container running the step
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// WorkflowStepOutputRequestBody is used to define fields on request body types.
type WorkflowStepOutputRequestBody struct {
	// Name of the variable to hold the step output value
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If the step builds a container image as output it will be referenced as
	// 'image'
	Image *StepOutputImageRequestBody `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// StepOutputImageRequestBody is used to define fields on request body types.
type StepOutputImageRequestBody struct {
	// Path to the Dockerfile used to build the image
	Dockerfile *string `form:"dockerfile,omitempty" json:"dockerfile,omitempty" xml:"dockerfile,omitempty"`
	// Name of the image, including the repository where the image will be stored
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StepEnvRequestBody is used to define fields on request body types.
type StepEnvRequestBody struct {
	// Name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value to set for the enviroment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WorkflowInputResponseBody is used to define fields on response body types.
type WorkflowInputResponseBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the input
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The type of the input (codeset, string, ...)
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Default value for the input
	Default *string `form:"default,omitempty" json:"default,omitempty" xml:"default,omitempty"`
	// Labels associated with the input
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// WorkflowOutputResponseBody is used to define fields on response body types.
type WorkflowOutputResponseBody struct {
	// Name of the output
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the output
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The data type of the output
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// WorkflowStepResponseBody is used to define fields on response body types.
type WorkflowStepResponseBody struct {
	// The name of the step
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The image used to execute the step
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// List of inputs for the step
	Inputs []*WorkflowStepInputResponseBody `form:"inputs,omitempty" json:"inputs,omitempty" xml:"inputs,omitempty"`
	// List of output from the step
	Outputs []*WorkflowStepOutputResponseBody `form:"outputs,omitempty" json:"outputs,omitempty" xml:"outputs,omitempty"`
	// List of environment variables available for the container running the step
	Env []*StepEnvResponseBody `form:"env,omitempty" json:"env,omitempty" xml:"env,omitempty"`
}

// WorkflowStepInputResponseBody is used to define fields on response body
// types.
type WorkflowStepInputResponseBody struct {
	// Name of the input
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value of the input
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Codeset associated with the input
	Codeset *StepInputCodesetResponseBody `form:"codeset,omitempty" json:"codeset,omitempty" xml:"codeset,omitempty"`
}

// StepInputCodesetResponseBody is used to define fields on response body types.
type StepInputCodesetResponseBody struct {
	// Name or ID of the codeset
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Path where the codeset will be mounted inside the container running the step
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// WorkflowStepOutputResponseBody is used to define fields on response body
// types.
type WorkflowStepOutputResponseBody struct {
	// Name of the variable to hold the step output value
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// If the step builds a container image as output it will be referenced as
	// 'image'
	Image *StepOutputImageResponseBody `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// StepOutputImageResponseBody is used to define fields on response body types.
type StepOutputImageResponseBody struct {
	// Path to the Dockerfile used to build the image
	Dockerfile *string `form:"dockerfile,omitempty" json:"dockerfile,omitempty" xml:"dockerfile,omitempty"`
	// Name of the image, including the repository where the image will be stored
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StepEnvResponseBody is used to define fields on response body types.
type StepEnvResponseBody struct {
	// Name of the environment variable
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Value to set for the enviroment variable
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// NewRegisterRequestBody builds the HTTP request body from the payload of the
// "register" endpoint of the "workflow" service.
func NewRegisterRequestBody(p *workflow.Workflow) *RegisterRequestBody {
	body := &RegisterRequestBody{
		ID:          p.ID,
		Created:     p.Created,
		Name:        p.Name,
		Description: p.Description,
	}
	if p.Inputs != nil {
		body.Inputs = make([]*WorkflowInputRequestBody, len(p.Inputs))
		for i, val := range p.Inputs {
			body.Inputs[i] = marshalWorkflowWorkflowInputToWorkflowInputRequestBody(val)
		}
	}
	if p.Outputs != nil {
		body.Outputs = make([]*WorkflowOutputRequestBody, len(p.Outputs))
		for i, val := range p.Outputs {
			body.Outputs[i] = marshalWorkflowWorkflowOutputToWorkflowOutputRequestBody(val)
		}
	}
	if p.Steps != nil {
		body.Steps = make([]*WorkflowStepRequestBody, len(p.Steps))
		for i, val := range p.Steps {
			body.Steps[i] = marshalWorkflowWorkflowStepToWorkflowStepRequestBody(val)
		}
	}
	return body
}

// NewListWorkflowOK builds a "workflow" service "list" endpoint result from a
// HTTP "OK" response.
func NewListWorkflowOK(body []*WorkflowResponse) []*workflow.Workflow {
	v := make([]*workflow.Workflow, len(body))
	for i, val := range body {
		v[i] = unmarshalWorkflowResponseToWorkflowWorkflow(val)
	}
	return v
}

// NewListNotFound builds a workflow service list endpoint NotFound error.
func NewListNotFound(body *ListNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRegisterWorkflowCreated builds a "workflow" service "register" endpoint
// result from a HTTP "Created" response.
func NewRegisterWorkflowCreated(body *RegisterResponseBody) *workflow.Workflow {
	v := &workflow.Workflow{
		ID:          body.ID,
		Created:     body.Created,
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.Inputs != nil {
		v.Inputs = make([]*workflow.WorkflowInput, len(body.Inputs))
		for i, val := range body.Inputs {
			v.Inputs[i] = unmarshalWorkflowInputResponseBodyToWorkflowWorkflowInput(val)
		}
	}
	if body.Outputs != nil {
		v.Outputs = make([]*workflow.WorkflowOutput, len(body.Outputs))
		for i, val := range body.Outputs {
			v.Outputs[i] = unmarshalWorkflowOutputResponseBodyToWorkflowWorkflowOutput(val)
		}
	}
	v.Steps = make([]*workflow.WorkflowStep, len(body.Steps))
	for i, val := range body.Steps {
		v.Steps[i] = unmarshalWorkflowStepResponseBodyToWorkflowWorkflowStep(val)
	}

	return v
}

// NewRegisterBadRequest builds a workflow service register endpoint BadRequest
// error.
func NewRegisterBadRequest(body *RegisterBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWorkflowOK builds a "workflow" service "get" endpoint result from a
// HTTP "OK" response.
func NewGetWorkflowOK(body *GetResponseBody) *workflow.Workflow {
	v := &workflow.Workflow{
		ID:          body.ID,
		Created:     body.Created,
		Name:        *body.Name,
		Description: body.Description,
	}
	if body.Inputs != nil {
		v.Inputs = make([]*workflow.WorkflowInput, len(body.Inputs))
		for i, val := range body.Inputs {
			v.Inputs[i] = unmarshalWorkflowInputResponseBodyToWorkflowWorkflowInput(val)
		}
	}
	if body.Outputs != nil {
		v.Outputs = make([]*workflow.WorkflowOutput, len(body.Outputs))
		for i, val := range body.Outputs {
			v.Outputs[i] = unmarshalWorkflowOutputResponseBodyToWorkflowWorkflowOutput(val)
		}
	}
	v.Steps = make([]*workflow.WorkflowStep, len(body.Steps))
	for i, val := range body.Steps {
		v.Steps[i] = unmarshalWorkflowStepResponseBodyToWorkflowWorkflowStep(val)
	}

	return v
}

// NewGetBadRequest builds a workflow service get endpoint BadRequest error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetNotFound builds a workflow service get endpoint NotFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRegisterResponseBody runs the validations defined on
// RegisterResponseBody
func ValidateRegisterResponseBody(body *RegisterResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_NotFound_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRegisterBadRequestResponseBody runs the validations defined on
// register_BadRequest_response_body
func ValidateRegisterBadRequestResponseBody(body *RegisterBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// get_BadRequest_response_body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_NotFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateWorkflowResponse runs the validations defined on WorkflowResponse
func ValidateWorkflowResponse(body *WorkflowResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Created != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
	}
	return
}
