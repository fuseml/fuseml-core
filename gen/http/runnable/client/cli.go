// Code generated by goa v3.3.1, DO NOT EDIT.
//
// runnable HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package client

import (
	"encoding/json"
	"fmt"

	runnable "github.com/fuseml/fuseml-core/gen/runnable"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the runnable list endpoint from CLI
// flags.
func BuildListPayload(runnableListKind string) (*runnable.ListPayload, error) {
	var kind *string
	{
		if runnableListKind != "" {
			kind = &runnableListKind
		}
	}
	v := &runnable.ListPayload{}
	v.Kind = kind

	return v, nil
}

// BuildRegisterPayload builds the payload for the runnable register endpoint
// from CLI flags.
func BuildRegisterPayload(runnableRegisterBody string) (*runnable.Runnable, error) {
	var err error
	var body RegisterRequestBody
	{
		err = json.Unmarshal([]byte(runnableRegisterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"created\": \"2021-04-09T06:17:25Z\",\n      \"id\": \"E330131A-4516-F39A-1E98-7CBF64E7E788\",\n      \"image\": {\n         \"registryUrl\": \"myregistry.io\",\n         \"repository\": \"example/builder\",\n         \"tag\": \"1.0\"\n      },\n      \"inputs\": [\n         {\n            \"kind\": \"parameter\",\n            \"name\": \"Input1\",\n            \"parameter\": {\n               \"datatype\": \"file\",\n               \"default\": \"mydata.csv\",\n               \"optional\": true\n            },\n            \"runnable\": {\n               \"kind\": \"builder\",\n               \"labels\": [\n                  \"label1\",\n                  \"label2\"\n               ],\n               \"name\": \"BuilderRun1\"\n            }\n         },\n         {\n            \"kind\": \"parameter\",\n            \"name\": \"Input1\",\n            \"parameter\": {\n               \"datatype\": \"file\",\n               \"default\": \"mydata.csv\",\n               \"optional\": true\n            },\n            \"runnable\": {\n               \"kind\": \"builder\",\n               \"labels\": [\n                  \"label1\",\n                  \"label2\"\n               ],\n               \"name\": \"BuilderRun1\"\n            }\n         }\n      ],\n      \"kind\": \"trainer\",\n      \"labels\": [\n         \"trainer\"\n      ],\n      \"name\": \"MyTrainer\",\n      \"outputs\": [\n         {\n            \"kind\": \"model\",\n            \"metadata\": {\n               \"datatype\": \"file\",\n               \"default\": \"mydata.csv\",\n               \"optional\": true\n            },\n            \"name\": \"Output1\",\n            \"runnable\": {\n               \"kind\": \"builder\",\n               \"labels\": [\n                  \"label1\",\n                  \"label2\"\n               ],\n               \"name\": \"BuilderRun1\"\n            }\n         },\n         {\n            \"kind\": \"model\",\n            \"metadata\": {\n               \"datatype\": \"file\",\n               \"default\": \"mydata.csv\",\n               \"optional\": true\n            },\n            \"name\": \"Output1\",\n            \"runnable\": {\n               \"kind\": \"builder\",\n               \"labels\": [\n                  \"label1\",\n                  \"label2\"\n               ],\n               \"name\": \"BuilderRun1\"\n            }\n         },\n         {\n            \"kind\": \"model\",\n            \"metadata\": {\n               \"datatype\": \"file\",\n               \"default\": \"mydata.csv\",\n               \"optional\": true\n            },\n            \"name\": \"Output1\",\n            \"runnable\": {\n               \"kind\": \"builder\",\n               \"labels\": [\n                  \"label1\",\n                  \"label2\"\n               ],\n               \"name\": \"BuilderRun1\"\n            }\n         }\n      ]\n   }'")
		}
		if body.Image == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
		}
		if body.Inputs == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("inputs", "body"))
		}
		if body.Outputs == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("outputs", "body"))
		}
		if body.Labels == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("labels", "body"))
		}
		if body.ID != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
		}
		if body.Created != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.created", *body.Created, goa.FormatDateTime))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &runnable.Runnable{
		ID:      body.ID,
		Name:    body.Name,
		Kind:    body.Kind,
		Created: body.Created,
	}
	if body.Image != nil {
		v.Image = marshalRunnableImageRequestBodyToRunnableRunnableImage(body.Image)
	}
	if body.Inputs != nil {
		v.Inputs = make([]*runnable.RunnableInput, len(body.Inputs))
		for i, val := range body.Inputs {
			v.Inputs[i] = marshalRunnableInputRequestBodyToRunnableRunnableInput(val)
		}
	}
	if body.Outputs != nil {
		v.Outputs = make([]*runnable.RunnableOutput, len(body.Outputs))
		for i, val := range body.Outputs {
			v.Outputs[i] = marshalRunnableOutputRequestBodyToRunnableRunnableOutput(val)
		}
	}
	if body.Labels != nil {
		v.Labels = make([]string, len(body.Labels))
		for i, val := range body.Labels {
			v.Labels[i] = val
		}
	}

	return v, nil
}

// BuildGetPayload builds the payload for the runnable get endpoint from CLI
// flags.
func BuildGetPayload(runnableGetRunnableNameOrID string) (*runnable.GetPayload, error) {
	var runnableNameOrID string
	{
		runnableNameOrID = runnableGetRunnableNameOrID
	}
	v := &runnable.GetPayload{}
	v.RunnableNameOrID = runnableNameOrID

	return v, nil
}
