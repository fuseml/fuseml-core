// Code generated by goa v3.3.1, DO NOT EDIT.
//
// workflow service
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package workflow

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The workflow service performs operations on workflows.
type Service interface {
	// List workflows registered in FuseML.
	List(context.Context, *ListPayload) (res []*Workflow, err error)
	// Register a workflow within the FuseML workflow store.
	Register(context.Context, *Workflow) (res *Workflow, err error)
	// Retrieve Workflow(s) from FuseML.
	Get(context.Context, *GetPayload) (res *Workflow, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "workflow"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "register", "get"}

// ListPayload is the payload type of the workflow service list method.
type ListPayload struct {
	// List workflows with the specified name
	Name *string
}

// Workflow descriptor
type Workflow struct {
	// The ID of the workflow
	ID *string
	// The workflow creation time
	Created *string
	// Name of the workflow
	Name string
	// Description for the workflow
	Description *string
	// Inputs for the workflow
	Inputs []*WorkflowInput
	// Outputs from the workflow
	Outputs []*WorkflowOutput
	// Steps to be executed by the workflow
	Steps []*WorkflowStep
}

// GetPayload is the payload type of the workflow service get method.
type GetPayload struct {
	// Workflow name or ID
	WorkflowNameOrID string
}

type WorkflowInput struct {
	// Name of the input
	Name *string
	// Description of the input
	Description *string
	// The type of the input (codeset, string, ...)
	Type *string
	// Default value for the input
	Default *string
	// Labels associated with the input
	Labels []string
}

type WorkflowOutput struct {
	// Name of the output
	Name *string
	// Description of the output
	Description *string
	// The data type of the output
	Type *string
}

type WorkflowStep struct {
	// The name of the step
	Name *string
	// The image used to execute the step
	Image *string
	// List of inputs for the step
	Inputs []*WorkflowStepInput
	// List of output from the step
	Outputs []*WorkflowStepOutput
	// List of environment variables available for the container running the step
	Env []*StepEnv
}

type WorkflowStepInput struct {
	// Name of the input
	Name *string
	// Value of the input
	Value *string
	// Codeset associated with the input
	Codeset *StepInputCodeset
}

type StepInputCodeset struct {
	// Name or ID of the codeset
	Name *string
	// Path where the codeset will be mounted inside the container running the step
	Path *string
}

type WorkflowStepOutput struct {
	// Name of the variable to hold the step output value
	Name *string
	// If the step builds a container image as output it will be referenced as
	// 'image'
	Image *StepOutputImage
}

type StepOutputImage struct {
	// Path to the Dockerfile used to build the image
	Dockerfile *string
	// Name of the image, including the repository where the image will be stored
	Name *string
}

type StepEnv struct {
	// Name of the environment variable
	Name *string
	// Value to set for the enviroment variable
	Value *string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "NotFound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "BadRequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
