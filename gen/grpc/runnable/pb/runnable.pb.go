// Code generated with goa v3.3.1, DO NOT EDIT.
//
// runnable protocol buffer definition
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: runnable.proto

package runnablepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of runnables to list
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{0}
}

func (x *ListRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field []*Runnable2 `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{1}
}

func (x *ListResponse) GetField() []*Runnable2 {
	if x != nil {
		return x.Field
	}
	return nil
}

type Runnable2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the runnable
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the runnable
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// The OCI container image associated with the runnable
	Image *RunnableImage `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInput `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutput `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The runnable's creation time
	Created string `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *Runnable2) Reset() {
	*x = Runnable2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runnable2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runnable2) ProtoMessage() {}

func (x *Runnable2) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runnable2.ProtoReflect.Descriptor instead.
func (*Runnable2) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{2}
}

func (x *Runnable2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Runnable2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Runnable2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Runnable2) GetImage() *RunnableImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Runnable2) GetInputs() []*RunnableInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Runnable2) GetOutputs() []*RunnableOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Runnable2) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Runnable2) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RunnableImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL for the external registry where the image is stored (empty for
	// internal images)
	RegistryUrl string `protobuf:"bytes,1,opt,name=registry_url,json=registryUrl,proto3" json:"registry_url,omitempty"`
	// The image repository
	Repository string `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	// The image tag
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *RunnableImage) Reset() {
	*x = RunnableImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnableImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableImage) ProtoMessage() {}

func (x *RunnableImage) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableImage.ProtoReflect.Descriptor instead.
func (*RunnableImage) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{3}
}

func (x *RunnableImage) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

func (x *RunnableImage) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *RunnableImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type RunnableInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Kind of input (e.g. runnable, dataset, model, parameter, etc.)
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRef `protobuf:"bytes,3,opt,name=runnable,proto3" json:"runnable,omitempty"`
	// Parameter description
	Parameter *InputParameter `protobuf:"bytes,4,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *RunnableInput) Reset() {
	*x = RunnableInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnableInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableInput) ProtoMessage() {}

func (x *RunnableInput) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableInput.ProtoReflect.Descriptor instead.
func (*RunnableInput) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{4}
}

func (x *RunnableInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnableInput) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RunnableInput) GetRunnable() *RunnableRef {
	if x != nil {
		return x.Runnable
	}
	return nil
}

func (x *RunnableInput) GetParameter() *InputParameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type RunnableRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Runnable name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Runnable kind
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Runnable labels
	Labels []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *RunnableRef) Reset() {
	*x = RunnableRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnableRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableRef) ProtoMessage() {}

func (x *RunnableRef) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableRef.ProtoReflect.Descriptor instead.
func (*RunnableRef) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{5}
}

func (x *RunnableRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnableRef) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RunnableRef) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type InputParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter data type
	Datatype string `protobuf:"bytes,1,opt,name=datatype,proto3" json:"datatype,omitempty"`
	// Optional parameter
	Optional bool `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
	// Default value
	Default string `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *InputParameter) Reset() {
	*x = InputParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputParameter) ProtoMessage() {}

func (x *InputParameter) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputParameter.ProtoReflect.Descriptor instead.
func (*InputParameter) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{6}
}

func (x *InputParameter) GetDatatype() string {
	if x != nil {
		return x.Datatype
	}
	return ""
}

func (x *InputParameter) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *InputParameter) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

type RunnableOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Kind of output (e.g. runnable, dataset, model, metatada, etc.)
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Runnable reference
	Runnable *RunnableRef `protobuf:"bytes,3,opt,name=runnable,proto3" json:"runnable,omitempty"`
	// Metadata description
	Metadata *InputParameter `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RunnableOutput) Reset() {
	*x = RunnableOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnableOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableOutput) ProtoMessage() {}

func (x *RunnableOutput) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableOutput.ProtoReflect.Descriptor instead.
func (*RunnableOutput) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{7}
}

func (x *RunnableOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunnableOutput) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RunnableOutput) GetRunnable() *RunnableRef {
	if x != nil {
		return x.Runnable
	}
	return nil
}

func (x *RunnableOutput) GetMetadata() *InputParameter {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the runnable
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the runnable
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// The OCI container image associated with the runnable
	Image *RunnableImage `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInput `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutput `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The runnable's creation time
	Created string `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RegisterRequest) GetImage() *RunnableImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *RegisterRequest) GetInputs() []*RunnableInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *RegisterRequest) GetOutputs() []*RunnableOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *RegisterRequest) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *RegisterRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the runnable
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the runnable
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// The OCI container image associated with the runnable
	Image *RunnableImage `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInput `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutput `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The runnable's creation time
	Created string `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RegisterResponse) GetImage() *RunnableImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *RegisterResponse) GetInputs() []*RunnableInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *RegisterResponse) GetOutputs() []*RunnableOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *RegisterResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *RegisterResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Runnable name or id
	RunnableNameOrId string `protobuf:"bytes,1,opt,name=runnable_name_or_id,json=runnableNameOrId,proto3" json:"runnable_name_or_id,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{10}
}

func (x *GetRequest) GetRunnableNameOrId() string {
	if x != nil {
		return x.RunnableNameOrId
	}
	return ""
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the runnable
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the runnable
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The kind of runnable (builder, trainer, predictor etc.)
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// The OCI container image associated with the runnable
	Image *RunnableImage `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// List of inputs (artifacts, values etc.) accepted by this runnable
	Inputs []*RunnableInput `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of outputs (artifacts, values etc.) generated by this runnable
	Outputs []*RunnableOutput `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The runnable's creation time
	Created string `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	// Labels associated with the runnable
	Labels []string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runnable_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runnable_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_runnable_proto_rawDescGZIP(), []int{11}
}

func (x *GetResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetResponse) GetImage() *RunnableImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *GetResponse) GetInputs() []*RunnableInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *GetResponse) GetOutputs() []*RunnableOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *GetResponse) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *GetResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_runnable_proto protoreflect.FileDescriptor

var file_runnable_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x39, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x32, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x09, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2d,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x64, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x52,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x72,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22,
	0x4d, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x62,
	0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a,
	0x08, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x3b, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x2d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0xb8, 0x01, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x75,
	0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runnable_proto_rawDescOnce sync.Once
	file_runnable_proto_rawDescData = file_runnable_proto_rawDesc
)

func file_runnable_proto_rawDescGZIP() []byte {
	file_runnable_proto_rawDescOnce.Do(func() {
		file_runnable_proto_rawDescData = protoimpl.X.CompressGZIP(file_runnable_proto_rawDescData)
	})
	return file_runnable_proto_rawDescData
}

var file_runnable_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_runnable_proto_goTypes = []interface{}{
	(*ListRequest)(nil),      // 0: runnable.ListRequest
	(*ListResponse)(nil),     // 1: runnable.ListResponse
	(*Runnable2)(nil),        // 2: runnable.Runnable2
	(*RunnableImage)(nil),    // 3: runnable.RunnableImage
	(*RunnableInput)(nil),    // 4: runnable.RunnableInput
	(*RunnableRef)(nil),      // 5: runnable.RunnableRef
	(*InputParameter)(nil),   // 6: runnable.InputParameter
	(*RunnableOutput)(nil),   // 7: runnable.RunnableOutput
	(*RegisterRequest)(nil),  // 8: runnable.RegisterRequest
	(*RegisterResponse)(nil), // 9: runnable.RegisterResponse
	(*GetRequest)(nil),       // 10: runnable.GetRequest
	(*GetResponse)(nil),      // 11: runnable.GetResponse
}
var file_runnable_proto_depIdxs = []int32{
	2,  // 0: runnable.ListResponse.field:type_name -> runnable.Runnable2
	3,  // 1: runnable.Runnable2.image:type_name -> runnable.RunnableImage
	4,  // 2: runnable.Runnable2.inputs:type_name -> runnable.RunnableInput
	7,  // 3: runnable.Runnable2.outputs:type_name -> runnable.RunnableOutput
	5,  // 4: runnable.RunnableInput.runnable:type_name -> runnable.RunnableRef
	6,  // 5: runnable.RunnableInput.parameter:type_name -> runnable.InputParameter
	5,  // 6: runnable.RunnableOutput.runnable:type_name -> runnable.RunnableRef
	6,  // 7: runnable.RunnableOutput.metadata:type_name -> runnable.InputParameter
	3,  // 8: runnable.RegisterRequest.image:type_name -> runnable.RunnableImage
	4,  // 9: runnable.RegisterRequest.inputs:type_name -> runnable.RunnableInput
	7,  // 10: runnable.RegisterRequest.outputs:type_name -> runnable.RunnableOutput
	3,  // 11: runnable.RegisterResponse.image:type_name -> runnable.RunnableImage
	4,  // 12: runnable.RegisterResponse.inputs:type_name -> runnable.RunnableInput
	7,  // 13: runnable.RegisterResponse.outputs:type_name -> runnable.RunnableOutput
	3,  // 14: runnable.GetResponse.image:type_name -> runnable.RunnableImage
	4,  // 15: runnable.GetResponse.inputs:type_name -> runnable.RunnableInput
	7,  // 16: runnable.GetResponse.outputs:type_name -> runnable.RunnableOutput
	0,  // 17: runnable.Runnable.List:input_type -> runnable.ListRequest
	8,  // 18: runnable.Runnable.Register:input_type -> runnable.RegisterRequest
	10, // 19: runnable.Runnable.Get:input_type -> runnable.GetRequest
	1,  // 20: runnable.Runnable.List:output_type -> runnable.ListResponse
	9,  // 21: runnable.Runnable.Register:output_type -> runnable.RegisterResponse
	11, // 22: runnable.Runnable.Get:output_type -> runnable.GetResponse
	20, // [20:23] is the sub-list for method output_type
	17, // [17:20] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_runnable_proto_init() }
func file_runnable_proto_init() {
	if File_runnable_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runnable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runnable2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnableImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnableInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnableRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnableOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runnable_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runnable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runnable_proto_goTypes,
		DependencyIndexes: file_runnable_proto_depIdxs,
		MessageInfos:      file_runnable_proto_msgTypes,
	}.Build()
	File_runnable_proto = out.File
	file_runnable_proto_rawDesc = nil
	file_runnable_proto_goTypes = nil
	file_runnable_proto_depIdxs = nil
}
