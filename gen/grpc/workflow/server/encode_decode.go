// Code generated by goa v3.3.1, DO NOT EDIT.
//
// workflow gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package server

import (
	"context"

	workflowpb "github.com/fuseml/fuseml-core/gen/grpc/workflow/pb"
	workflow "github.com/fuseml/fuseml-core/gen/workflow"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeListResponse encodes responses from the "workflow" service "list"
// endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.([]*workflow.Workflow)
	if !ok {
		return nil, goagrpc.ErrInvalidType("workflow", "list", "[]*workflow.Workflow", v)
	}
	resp := NewListResponse(result)
	return resp, nil
}

// DecodeListRequest decodes requests sent to "workflow" service "list"
// endpoint.
func DecodeListRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *workflowpb.ListRequest
		ok      bool
	)
	{
		if message, ok = v.(*workflowpb.ListRequest); !ok {
			return nil, goagrpc.ErrInvalidType("workflow", "list", "*workflowpb.ListRequest", v)
		}
	}
	var payload *workflow.ListPayload
	{
		payload = NewListPayload(message)
	}
	return payload, nil
}

// EncodeRegisterResponse encodes responses from the "workflow" service
// "register" endpoint.
func EncodeRegisterResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*workflow.Workflow)
	if !ok {
		return nil, goagrpc.ErrInvalidType("workflow", "register", "*workflow.Workflow", v)
	}
	resp := NewRegisterResponse(result)
	return resp, nil
}

// DecodeRegisterRequest decodes requests sent to "workflow" service "register"
// endpoint.
func DecodeRegisterRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *workflowpb.RegisterRequest
		ok      bool
	)
	{
		if message, ok = v.(*workflowpb.RegisterRequest); !ok {
			return nil, goagrpc.ErrInvalidType("workflow", "register", "*workflowpb.RegisterRequest", v)
		}
		if err := ValidateRegisterRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *workflow.Workflow
	{
		payload = NewRegisterPayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "workflow" service "get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*workflow.Workflow)
	if !ok {
		return nil, goagrpc.ErrInvalidType("workflow", "get", "*workflow.Workflow", v)
	}
	resp := NewGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "workflow" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *workflowpb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*workflowpb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("workflow", "get", "*workflowpb.GetRequest", v)
		}
	}
	var payload *workflow.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}
