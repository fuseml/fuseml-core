// Code generated by goa v3.3.1, DO NOT EDIT.
//
// workflow gRPC server types
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package server

import (
	workflowpb "github.com/fuseml/fuseml-core/gen/grpc/workflow/pb"
	workflow "github.com/fuseml/fuseml-core/gen/workflow"
	goa "goa.design/goa/v3/pkg"
)

// NewListPayload builds the payload of the "list" endpoint of the "workflow"
// service from the gRPC request type.
func NewListPayload(message *workflowpb.ListRequest) *workflow.ListPayload {
	v := &workflow.ListPayload{}
	if message.Name != "" {
		v.Name = &message.Name
	}
	return v
}

// NewListResponse builds the gRPC response type from the result of the "list"
// endpoint of the "workflow" service.
func NewListResponse(result []*workflow.Workflow) *workflowpb.ListResponse {
	message := &workflowpb.ListResponse{}
	message.Field = make([]*workflowpb.Workflow2, len(result))
	for i, val := range result {
		message.Field[i] = &workflowpb.Workflow2{
			Name: val.Name,
		}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Created != nil {
			message.Field[i].Created = *val.Created
		}
		if val.Description != nil {
			message.Field[i].Description = *val.Description
		}
		if val.Inputs != nil {
			message.Field[i].Inputs = make([]*workflowpb.WorkflowInput, len(val.Inputs))
			for j, val := range val.Inputs {
				message.Field[i].Inputs[j] = &workflowpb.WorkflowInput{}
				if val.Name != nil {
					message.Field[i].Inputs[j].Name = *val.Name
				}
				if val.Description != nil {
					message.Field[i].Inputs[j].Description = *val.Description
				}
				if val.Type != nil {
					message.Field[i].Inputs[j].Type = *val.Type
				}
				if val.Default != nil {
					message.Field[i].Inputs[j].Default = *val.Default
				}
				if val.Labels != nil {
					message.Field[i].Inputs[j].Labels = make([]string, len(val.Labels))
					for k, val := range val.Labels {
						message.Field[i].Inputs[j].Labels[k] = val
					}
				}
			}
		}
		if val.Outputs != nil {
			message.Field[i].Outputs = make([]*workflowpb.WorkflowOutput, len(val.Outputs))
			for j, val := range val.Outputs {
				message.Field[i].Outputs[j] = &workflowpb.WorkflowOutput{}
				if val.Name != nil {
					message.Field[i].Outputs[j].Name = *val.Name
				}
				if val.Description != nil {
					message.Field[i].Outputs[j].Description = *val.Description
				}
				if val.Type != nil {
					message.Field[i].Outputs[j].Type = *val.Type
				}
			}
		}
		if val.Steps != nil {
			message.Field[i].Steps = make([]*workflowpb.WorkflowStep, len(val.Steps))
			for j, val := range val.Steps {
				message.Field[i].Steps[j] = &workflowpb.WorkflowStep{}
				if val.Name != nil {
					message.Field[i].Steps[j].Name = *val.Name
				}
				if val.Image != nil {
					message.Field[i].Steps[j].Image = *val.Image
				}
				if val.Inputs != nil {
					message.Field[i].Steps[j].Inputs = make([]*workflowpb.WorkflowStepInput, len(val.Inputs))
					for k, val := range val.Inputs {
						message.Field[i].Steps[j].Inputs[k] = &workflowpb.WorkflowStepInput{}
						if val.Name != nil {
							message.Field[i].Steps[j].Inputs[k].Name = *val.Name
						}
						if val.Value != nil {
							message.Field[i].Steps[j].Inputs[k].Value = *val.Value
						}
						if val.Codeset != nil {
							message.Field[i].Steps[j].Inputs[k].Codeset = svcWorkflowStepInputCodesetToWorkflowpbStepInputCodeset(val.Codeset)
						}
					}
				}
				if val.Outputs != nil {
					message.Field[i].Steps[j].Outputs = make([]*workflowpb.WorkflowStepOutput, len(val.Outputs))
					for k, val := range val.Outputs {
						message.Field[i].Steps[j].Outputs[k] = &workflowpb.WorkflowStepOutput{}
						if val.Name != nil {
							message.Field[i].Steps[j].Outputs[k].Name = *val.Name
						}
						if val.Image != nil {
							message.Field[i].Steps[j].Outputs[k].Image = svcWorkflowStepOutputImageToWorkflowpbStepOutputImage(val.Image)
						}
					}
				}
				if val.Env != nil {
					message.Field[i].Steps[j].Env = make([]*workflowpb.StepEnv, len(val.Env))
					for k, val := range val.Env {
						message.Field[i].Steps[j].Env[k] = &workflowpb.StepEnv{}
						if val.Name != nil {
							message.Field[i].Steps[j].Env[k].Name = *val.Name
						}
						if val.Value != nil {
							message.Field[i].Steps[j].Env[k].Value = *val.Value
						}
					}
				}
			}
		}
	}
	return message
}

// NewRegisterPayload builds the payload of the "register" endpoint of the
// "workflow" service from the gRPC request type.
func NewRegisterPayload(message *workflowpb.RegisterRequest) *workflow.Workflow {
	v := &workflow.Workflow{
		Name: message.Name,
	}
	if message.Id != "" {
		v.ID = &message.Id
	}
	if message.Created != "" {
		v.Created = &message.Created
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	if message.Inputs != nil {
		v.Inputs = make([]*workflow.WorkflowInput, len(message.Inputs))
		for i, val := range message.Inputs {
			v.Inputs[i] = &workflow.WorkflowInput{}
			if val.Name != "" {
				v.Inputs[i].Name = &val.Name
			}
			if val.Description != "" {
				v.Inputs[i].Description = &val.Description
			}
			if val.Type != "" {
				v.Inputs[i].Type = &val.Type
			}
			if val.Default != "" {
				v.Inputs[i].Default = &val.Default
			}
			if val.Labels != nil {
				v.Inputs[i].Labels = make([]string, len(val.Labels))
				for j, val := range val.Labels {
					v.Inputs[i].Labels[j] = val
				}
			}
		}
	}
	if message.Outputs != nil {
		v.Outputs = make([]*workflow.WorkflowOutput, len(message.Outputs))
		for i, val := range message.Outputs {
			v.Outputs[i] = &workflow.WorkflowOutput{}
			if val.Name != "" {
				v.Outputs[i].Name = &val.Name
			}
			if val.Description != "" {
				v.Outputs[i].Description = &val.Description
			}
			if val.Type != "" {
				v.Outputs[i].Type = &val.Type
			}
		}
	}
	if message.Steps != nil {
		v.Steps = make([]*workflow.WorkflowStep, len(message.Steps))
		for i, val := range message.Steps {
			v.Steps[i] = &workflow.WorkflowStep{}
			if val.Name != "" {
				v.Steps[i].Name = &val.Name
			}
			if val.Image != "" {
				v.Steps[i].Image = &val.Image
			}
			if val.Inputs != nil {
				v.Steps[i].Inputs = make([]*workflow.WorkflowStepInput, len(val.Inputs))
				for j, val := range val.Inputs {
					v.Steps[i].Inputs[j] = &workflow.WorkflowStepInput{}
					if val.Name != "" {
						v.Steps[i].Inputs[j].Name = &val.Name
					}
					if val.Value != "" {
						v.Steps[i].Inputs[j].Value = &val.Value
					}
					if val.Codeset != nil {
						v.Steps[i].Inputs[j].Codeset = protobufWorkflowpbStepInputCodesetToWorkflowStepInputCodeset(val.Codeset)
					}
				}
			}
			if val.Outputs != nil {
				v.Steps[i].Outputs = make([]*workflow.WorkflowStepOutput, len(val.Outputs))
				for j, val := range val.Outputs {
					v.Steps[i].Outputs[j] = &workflow.WorkflowStepOutput{}
					if val.Name != "" {
						v.Steps[i].Outputs[j].Name = &val.Name
					}
					if val.Image != nil {
						v.Steps[i].Outputs[j].Image = protobufWorkflowpbStepOutputImageToWorkflowStepOutputImage(val.Image)
					}
				}
			}
			if val.Env != nil {
				v.Steps[i].Env = make([]*workflow.StepEnv, len(val.Env))
				for j, val := range val.Env {
					v.Steps[i].Env[j] = &workflow.StepEnv{}
					if val.Name != "" {
						v.Steps[i].Env[j].Name = &val.Name
					}
					if val.Value != "" {
						v.Steps[i].Env[j].Value = &val.Value
					}
				}
			}
		}
	}
	return v
}

// NewRegisterResponse builds the gRPC response type from the result of the
// "register" endpoint of the "workflow" service.
func NewRegisterResponse(result *workflow.Workflow) *workflowpb.RegisterResponse {
	message := &workflowpb.RegisterResponse{
		Name: result.Name,
	}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Created != nil {
		message.Created = *result.Created
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Inputs != nil {
		message.Inputs = make([]*workflowpb.WorkflowInput, len(result.Inputs))
		for i, val := range result.Inputs {
			message.Inputs[i] = &workflowpb.WorkflowInput{}
			if val.Name != nil {
				message.Inputs[i].Name = *val.Name
			}
			if val.Description != nil {
				message.Inputs[i].Description = *val.Description
			}
			if val.Type != nil {
				message.Inputs[i].Type = *val.Type
			}
			if val.Default != nil {
				message.Inputs[i].Default = *val.Default
			}
			if val.Labels != nil {
				message.Inputs[i].Labels = make([]string, len(val.Labels))
				for j, val := range val.Labels {
					message.Inputs[i].Labels[j] = val
				}
			}
		}
	}
	if result.Outputs != nil {
		message.Outputs = make([]*workflowpb.WorkflowOutput, len(result.Outputs))
		for i, val := range result.Outputs {
			message.Outputs[i] = &workflowpb.WorkflowOutput{}
			if val.Name != nil {
				message.Outputs[i].Name = *val.Name
			}
			if val.Description != nil {
				message.Outputs[i].Description = *val.Description
			}
			if val.Type != nil {
				message.Outputs[i].Type = *val.Type
			}
		}
	}
	if result.Steps != nil {
		message.Steps = make([]*workflowpb.WorkflowStep, len(result.Steps))
		for i, val := range result.Steps {
			message.Steps[i] = &workflowpb.WorkflowStep{}
			if val.Name != nil {
				message.Steps[i].Name = *val.Name
			}
			if val.Image != nil {
				message.Steps[i].Image = *val.Image
			}
			if val.Inputs != nil {
				message.Steps[i].Inputs = make([]*workflowpb.WorkflowStepInput, len(val.Inputs))
				for j, val := range val.Inputs {
					message.Steps[i].Inputs[j] = &workflowpb.WorkflowStepInput{}
					if val.Name != nil {
						message.Steps[i].Inputs[j].Name = *val.Name
					}
					if val.Value != nil {
						message.Steps[i].Inputs[j].Value = *val.Value
					}
					if val.Codeset != nil {
						message.Steps[i].Inputs[j].Codeset = svcWorkflowStepInputCodesetToWorkflowpbStepInputCodeset(val.Codeset)
					}
				}
			}
			if val.Outputs != nil {
				message.Steps[i].Outputs = make([]*workflowpb.WorkflowStepOutput, len(val.Outputs))
				for j, val := range val.Outputs {
					message.Steps[i].Outputs[j] = &workflowpb.WorkflowStepOutput{}
					if val.Name != nil {
						message.Steps[i].Outputs[j].Name = *val.Name
					}
					if val.Image != nil {
						message.Steps[i].Outputs[j].Image = svcWorkflowStepOutputImageToWorkflowpbStepOutputImage(val.Image)
					}
				}
			}
			if val.Env != nil {
				message.Steps[i].Env = make([]*workflowpb.StepEnv, len(val.Env))
				for j, val := range val.Env {
					message.Steps[i].Env[j] = &workflowpb.StepEnv{}
					if val.Name != nil {
						message.Steps[i].Env[j].Name = *val.Name
					}
					if val.Value != nil {
						message.Steps[i].Env[j].Value = *val.Value
					}
				}
			}
		}
	}
	return message
}

// NewGetPayload builds the payload of the "get" endpoint of the "workflow"
// service from the gRPC request type.
func NewGetPayload(message *workflowpb.GetRequest) *workflow.GetPayload {
	v := &workflow.GetPayload{
		WorkflowNameOrID: message.WorkflowNameOrId,
	}
	return v
}

// NewGetResponse builds the gRPC response type from the result of the "get"
// endpoint of the "workflow" service.
func NewGetResponse(result *workflow.Workflow) *workflowpb.GetResponse {
	message := &workflowpb.GetResponse{
		Name: result.Name,
	}
	if result.ID != nil {
		message.Id = *result.ID
	}
	if result.Created != nil {
		message.Created = *result.Created
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Inputs != nil {
		message.Inputs = make([]*workflowpb.WorkflowInput, len(result.Inputs))
		for i, val := range result.Inputs {
			message.Inputs[i] = &workflowpb.WorkflowInput{}
			if val.Name != nil {
				message.Inputs[i].Name = *val.Name
			}
			if val.Description != nil {
				message.Inputs[i].Description = *val.Description
			}
			if val.Type != nil {
				message.Inputs[i].Type = *val.Type
			}
			if val.Default != nil {
				message.Inputs[i].Default = *val.Default
			}
			if val.Labels != nil {
				message.Inputs[i].Labels = make([]string, len(val.Labels))
				for j, val := range val.Labels {
					message.Inputs[i].Labels[j] = val
				}
			}
		}
	}
	if result.Outputs != nil {
		message.Outputs = make([]*workflowpb.WorkflowOutput, len(result.Outputs))
		for i, val := range result.Outputs {
			message.Outputs[i] = &workflowpb.WorkflowOutput{}
			if val.Name != nil {
				message.Outputs[i].Name = *val.Name
			}
			if val.Description != nil {
				message.Outputs[i].Description = *val.Description
			}
			if val.Type != nil {
				message.Outputs[i].Type = *val.Type
			}
		}
	}
	if result.Steps != nil {
		message.Steps = make([]*workflowpb.WorkflowStep, len(result.Steps))
		for i, val := range result.Steps {
			message.Steps[i] = &workflowpb.WorkflowStep{}
			if val.Name != nil {
				message.Steps[i].Name = *val.Name
			}
			if val.Image != nil {
				message.Steps[i].Image = *val.Image
			}
			if val.Inputs != nil {
				message.Steps[i].Inputs = make([]*workflowpb.WorkflowStepInput, len(val.Inputs))
				for j, val := range val.Inputs {
					message.Steps[i].Inputs[j] = &workflowpb.WorkflowStepInput{}
					if val.Name != nil {
						message.Steps[i].Inputs[j].Name = *val.Name
					}
					if val.Value != nil {
						message.Steps[i].Inputs[j].Value = *val.Value
					}
					if val.Codeset != nil {
						message.Steps[i].Inputs[j].Codeset = svcWorkflowStepInputCodesetToWorkflowpbStepInputCodeset(val.Codeset)
					}
				}
			}
			if val.Outputs != nil {
				message.Steps[i].Outputs = make([]*workflowpb.WorkflowStepOutput, len(val.Outputs))
				for j, val := range val.Outputs {
					message.Steps[i].Outputs[j] = &workflowpb.WorkflowStepOutput{}
					if val.Name != nil {
						message.Steps[i].Outputs[j].Name = *val.Name
					}
					if val.Image != nil {
						message.Steps[i].Outputs[j].Image = svcWorkflowStepOutputImageToWorkflowpbStepOutputImage(val.Image)
					}
				}
			}
			if val.Env != nil {
				message.Steps[i].Env = make([]*workflowpb.StepEnv, len(val.Env))
				for j, val := range val.Env {
					message.Steps[i].Env[j] = &workflowpb.StepEnv{}
					if val.Name != nil {
						message.Steps[i].Env[j].Name = *val.Name
					}
					if val.Value != nil {
						message.Steps[i].Env[j].Value = *val.Value
					}
				}
			}
		}
	}
	return message
}

// ValidateWorkflowInput runs the validations defined on WorkflowInput.
func ValidateWorkflowInput(message *workflowpb.WorkflowInput) (err error) {

	return
}

// ValidateWorkflowOutput runs the validations defined on WorkflowOutput.
func ValidateWorkflowOutput(message *workflowpb.WorkflowOutput) (err error) {

	return
}

// ValidateWorkflowStep runs the validations defined on WorkflowStep.
func ValidateWorkflowStep(message *workflowpb.WorkflowStep) (err error) {

	return
}

// ValidateWorkflowStepInput runs the validations defined on WorkflowStepInput.
func ValidateWorkflowStepInput(message *workflowpb.WorkflowStepInput) (err error) {

	return
}

// ValidateStepInputCodeset runs the validations defined on StepInputCodeset.
func ValidateStepInputCodeset(message *workflowpb.StepInputCodeset) (err error) {

	return
}

// ValidateWorkflowStepOutput runs the validations defined on
// WorkflowStepOutput.
func ValidateWorkflowStepOutput(message *workflowpb.WorkflowStepOutput) (err error) {

	return
}

// ValidateStepOutputImage runs the validations defined on StepOutputImage.
func ValidateStepOutputImage(message *workflowpb.StepOutputImage) (err error) {

	return
}

// ValidateStepEnv runs the validations defined on StepEnv.
func ValidateStepEnv(message *workflowpb.StepEnv) (err error) {

	return
}

// ValidateRegisterRequest runs the validations defined on RegisterRequest.
func ValidateRegisterRequest(message *workflowpb.RegisterRequest) (err error) {
	if message.Steps == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("steps", "message"))
	}
	if message.Id != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.id", message.Id, goa.FormatUUID))
	}
	if message.Created != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.created", message.Created, goa.FormatDateTime))
	}
	return
}

// svcWorkflowStepInputCodesetToWorkflowpbStepInputCodeset builds a value of
// type *workflowpb.StepInputCodeset from a value of type
// *workflow.StepInputCodeset.
func svcWorkflowStepInputCodesetToWorkflowpbStepInputCodeset(v *workflow.StepInputCodeset) *workflowpb.StepInputCodeset {
	if v == nil {
		return nil
	}
	res := &workflowpb.StepInputCodeset{}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.Path != nil {
		res.Path = *v.Path
	}

	return res
}

// svcWorkflowStepOutputImageToWorkflowpbStepOutputImage builds a value of type
// *workflowpb.StepOutputImage from a value of type *workflow.StepOutputImage.
func svcWorkflowStepOutputImageToWorkflowpbStepOutputImage(v *workflow.StepOutputImage) *workflowpb.StepOutputImage {
	if v == nil {
		return nil
	}
	res := &workflowpb.StepOutputImage{}
	if v.Dockerfile != nil {
		res.Dockerfile = *v.Dockerfile
	}
	if v.Name != nil {
		res.Name = *v.Name
	}

	return res
}

// protobufWorkflowpbStepInputCodesetToWorkflowStepInputCodeset builds a value
// of type *workflow.StepInputCodeset from a value of type
// *workflowpb.StepInputCodeset.
func protobufWorkflowpbStepInputCodesetToWorkflowStepInputCodeset(v *workflowpb.StepInputCodeset) *workflow.StepInputCodeset {
	if v == nil {
		return nil
	}
	res := &workflow.StepInputCodeset{}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.Path != "" {
		res.Path = &v.Path
	}

	return res
}

// protobufWorkflowpbStepOutputImageToWorkflowStepOutputImage builds a value of
// type *workflow.StepOutputImage from a value of type
// *workflowpb.StepOutputImage.
func protobufWorkflowpbStepOutputImageToWorkflowStepOutputImage(v *workflowpb.StepOutputImage) *workflow.StepOutputImage {
	if v == nil {
		return nil
	}
	res := &workflow.StepOutputImage{}
	if v.Dockerfile != "" {
		res.Dockerfile = &v.Dockerfile
	}
	if v.Name != "" {
		res.Name = &v.Name
	}

	return res
}
