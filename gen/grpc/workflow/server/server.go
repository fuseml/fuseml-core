// Code generated by goa v3.3.1, DO NOT EDIT.
//
// workflow gRPC server
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package server

import (
	"context"

	workflowpb "github.com/fuseml/fuseml-core/gen/grpc/workflow/pb"
	workflow "github.com/fuseml/fuseml-core/gen/workflow"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the workflowpb.WorkflowServer interface.
type Server struct {
	ListH     goagrpc.UnaryHandler
	RegisterH goagrpc.UnaryHandler
	GetH      goagrpc.UnaryHandler
	workflowpb.UnimplementedWorkflowServer
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the workflow service endpoints.
func New(e *workflow.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		ListH:     NewListHandler(e.List, uh),
		RegisterH: NewRegisterHandler(e.Register, uh),
		GetH:      NewGetHandler(e.Get, uh),
	}
}

// NewListHandler creates a gRPC handler which serves the "workflow" service
// "list" endpoint.
func NewListHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeListRequest, EncodeListResponse)
	}
	return h
}

// List implements the "List" method in workflowpb.WorkflowServer interface.
func (s *Server) List(ctx context.Context, message *workflowpb.ListRequest) (*workflowpb.ListResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "list")
	ctx = context.WithValue(ctx, goa.ServiceKey, "workflow")
	resp, err := s.ListH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*workflowpb.ListResponse), nil
}

// NewRegisterHandler creates a gRPC handler which serves the "workflow"
// service "register" endpoint.
func NewRegisterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRegisterRequest, EncodeRegisterResponse)
	}
	return h
}

// Register implements the "Register" method in workflowpb.WorkflowServer
// interface.
func (s *Server) Register(ctx context.Context, message *workflowpb.RegisterRequest) (*workflowpb.RegisterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "register")
	ctx = context.WithValue(ctx, goa.ServiceKey, "workflow")
	resp, err := s.RegisterH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*workflowpb.RegisterResponse), nil
}

// NewGetHandler creates a gRPC handler which serves the "workflow" service
// "get" endpoint.
func NewGetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetRequest, EncodeGetResponse)
	}
	return h
}

// Get implements the "Get" method in workflowpb.WorkflowServer interface.
func (s *Server) Get(ctx context.Context, message *workflowpb.GetRequest) (*workflowpb.GetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "get")
	ctx = context.WithValue(ctx, goa.ServiceKey, "workflow")
	resp, err := s.GetH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "BadRequest":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "NotFound":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*workflowpb.GetResponse), nil
}
