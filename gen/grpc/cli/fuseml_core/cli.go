// Code generated by goa v3.3.1, DO NOT EDIT.
//
// fuseml-core gRPC client CLI support package
//
// Command:
// $ goa gen github.com/fuseml/fuseml-core/design

package cli

import (
	"flag"
	"fmt"
	"os"

	codesetc "github.com/fuseml/fuseml-core/gen/grpc/codeset/client"
	runnablec "github.com/fuseml/fuseml-core/gen/grpc/runnable/client"
	workflowc "github.com/fuseml/fuseml-core/gen/grpc/workflow/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `codeset (list|register|get)
runnable (list|register|get)
workflow (list|register|get)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` codeset list --message '{
      "label": "mlflow",
      "project": "mlflow-project-01"
   }'` + "\n" +
		os.Args[0] + ` runnable list --message '{
      "kind": "builder"
   }'` + "\n" +
		os.Args[0] + ` workflow list --message '{
      "name": "workflowA"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		codesetFlags = flag.NewFlagSet("codeset", flag.ContinueOnError)

		codesetListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		codesetListMessageFlag = codesetListFlags.String("message", "", "")

		codesetRegisterFlags       = flag.NewFlagSet("register", flag.ExitOnError)
		codesetRegisterMessageFlag = codesetRegisterFlags.String("message", "", "")

		codesetGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		codesetGetMessageFlag = codesetGetFlags.String("message", "", "")

		runnableFlags = flag.NewFlagSet("runnable", flag.ContinueOnError)

		runnableListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		runnableListMessageFlag = runnableListFlags.String("message", "", "")

		runnableRegisterFlags       = flag.NewFlagSet("register", flag.ExitOnError)
		runnableRegisterMessageFlag = runnableRegisterFlags.String("message", "", "")

		runnableGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		runnableGetMessageFlag = runnableGetFlags.String("message", "", "")

		workflowFlags = flag.NewFlagSet("workflow", flag.ContinueOnError)

		workflowListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		workflowListMessageFlag = workflowListFlags.String("message", "", "")

		workflowRegisterFlags       = flag.NewFlagSet("register", flag.ExitOnError)
		workflowRegisterMessageFlag = workflowRegisterFlags.String("message", "", "")

		workflowGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		workflowGetMessageFlag = workflowGetFlags.String("message", "", "")
	)
	codesetFlags.Usage = codesetUsage
	codesetListFlags.Usage = codesetListUsage
	codesetRegisterFlags.Usage = codesetRegisterUsage
	codesetGetFlags.Usage = codesetGetUsage

	runnableFlags.Usage = runnableUsage
	runnableListFlags.Usage = runnableListUsage
	runnableRegisterFlags.Usage = runnableRegisterUsage
	runnableGetFlags.Usage = runnableGetUsage

	workflowFlags.Usage = workflowUsage
	workflowListFlags.Usage = workflowListUsage
	workflowRegisterFlags.Usage = workflowRegisterUsage
	workflowGetFlags.Usage = workflowGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "codeset":
			svcf = codesetFlags
		case "runnable":
			svcf = runnableFlags
		case "workflow":
			svcf = workflowFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "codeset":
			switch epn {
			case "list":
				epf = codesetListFlags

			case "register":
				epf = codesetRegisterFlags

			case "get":
				epf = codesetGetFlags

			}

		case "runnable":
			switch epn {
			case "list":
				epf = runnableListFlags

			case "register":
				epf = runnableRegisterFlags

			case "get":
				epf = runnableGetFlags

			}

		case "workflow":
			switch epn {
			case "list":
				epf = workflowListFlags

			case "register":
				epf = workflowRegisterFlags

			case "get":
				epf = workflowGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "codeset":
			c := codesetc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = codesetc.BuildListPayload(*codesetListMessageFlag)
			case "register":
				endpoint = c.Register()
				data, err = codesetc.BuildRegisterPayload(*codesetRegisterMessageFlag)
			case "get":
				endpoint = c.Get()
				data, err = codesetc.BuildGetPayload(*codesetGetMessageFlag)
			}
		case "runnable":
			c := runnablec.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = runnablec.BuildListPayload(*runnableListMessageFlag)
			case "register":
				endpoint = c.Register()
				data, err = runnablec.BuildRegisterPayload(*runnableRegisterMessageFlag)
			case "get":
				endpoint = c.Get()
				data, err = runnablec.BuildGetPayload(*runnableGetMessageFlag)
			}
		case "workflow":
			c := workflowc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = workflowc.BuildListPayload(*workflowListMessageFlag)
			case "register":
				endpoint = c.Register()
				data, err = workflowc.BuildRegisterPayload(*workflowRegisterMessageFlag)
			case "get":
				endpoint = c.Get()
				data, err = workflowc.BuildGetPayload(*workflowGetMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// codesetUsage displays the usage of the codeset command and its subcommands.
func codesetUsage() {
	fmt.Fprintf(os.Stderr, `The codeset service performs operations on Codesets.
Usage:
    %s [globalflags] codeset COMMAND [flags]

COMMAND:
    list: Retrieve information about Codesets registered in FuseML.
    register: Register a Codeset with the FuseML codeset store.
    get: Retrieve an Codeset from FuseML.

Additional help:
    %s codeset COMMAND --help
`, os.Args[0], os.Args[0])
}
func codesetListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] codeset list -message JSON

Retrieve information about Codesets registered in FuseML.
    -message JSON: 

Example:
    `+os.Args[0]+` codeset list --message '{
      "label": "mlflow",
      "project": "mlflow-project-01"
   }'
`, os.Args[0])
}

func codesetRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] codeset register -message JSON

Register a Codeset with the FuseML codeset store.
    -message JSON: 

Example:
    `+os.Args[0]+` codeset register --message '{
      "codeset": {
         "description": "My first MLFlow application with FuseML",
         "labels": [
            "mlflow",
            "playground"
         ],
         "name": "mlflow-app-01",
         "project": "mlflow-project-01"
      },
      "location": "mlflow-project-01"
   }'
`, os.Args[0])
}

func codesetGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] codeset get -message JSON

Retrieve an Codeset from FuseML.
    -message JSON: 

Example:
    `+os.Args[0]+` codeset get --message '{
      "name": "mlflow-app-01",
      "project": "mlflow-project-01"
   }'
`, os.Args[0])
}

// runnableUsage displays the usage of the runnable command and its subcommands.
func runnableUsage() {
	fmt.Fprintf(os.Stderr, `The runable service performs operations on runnables.
Usage:
    %s [globalflags] runnable COMMAND [flags]

COMMAND:
    list: Retrieve information about runnables registered in FuseML.
    register: Register a runnable with the FuseML runnable store.
    get: Retrieve an Runnable from FuseML.

Additional help:
    %s runnable COMMAND --help
`, os.Args[0], os.Args[0])
}
func runnableListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable list -message JSON

Retrieve information about runnables registered in FuseML.
    -message JSON: 

Example:
    `+os.Args[0]+` runnable list --message '{
      "kind": "builder"
   }'
`, os.Args[0])
}

func runnableRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable register -message JSON

Register a runnable with the FuseML runnable store.
    -message JSON: 

Example:
    `+os.Args[0]+` runnable register --message '{
      "created": "2021-04-09T06:17:25Z",
      "id": "5E3B665E-1239-9C12-9643-FFC1E6C04697",
      "image": {
         "registryUrl": "myregistry.io",
         "repository": "example/builder",
         "tag": "1.0"
      },
      "inputs": [
         {
            "kind": "parameter",
            "name": "Input1",
            "parameter": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         },
         {
            "kind": "parameter",
            "name": "Input1",
            "parameter": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         }
      ],
      "kind": "trainer",
      "labels": [
         "trainer"
      ],
      "name": "MyTrainer",
      "outputs": [
         {
            "kind": "model",
            "metadata": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "name": "Output1",
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         },
         {
            "kind": "model",
            "metadata": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "name": "Output1",
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         },
         {
            "kind": "model",
            "metadata": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "name": "Output1",
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         },
         {
            "kind": "model",
            "metadata": {
               "datatype": "file",
               "default": "mydata.csv",
               "optional": true
            },
            "name": "Output1",
            "runnable": {
               "kind": "builder",
               "labels": [
                  "label1",
                  "label2"
               ],
               "name": "BuilderRun1"
            }
         }
      ]
   }'
`, os.Args[0])
}

func runnableGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] runnable get -message JSON

Retrieve an Runnable from FuseML.
    -message JSON: 

Example:
    `+os.Args[0]+` runnable get --message '{
      "runnableNameOrId": "288BFD74-D973-18B5-FAA5-29ADF4569AC7"
   }'
`, os.Args[0])
}

// workflowUsage displays the usage of the workflow command and its subcommands.
func workflowUsage() {
	fmt.Fprintf(os.Stderr, `The workflow service performs operations on workflows.
Usage:
    %s [globalflags] workflow COMMAND [flags]

COMMAND:
    list: List workflows registered in FuseML.
    register: Register a workflow within the FuseML workflow store.
    get: Retrieve Workflow(s) from FuseML.

Additional help:
    %s workflow COMMAND --help
`, os.Args[0], os.Args[0])
}
func workflowListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] workflow list -message JSON

List workflows registered in FuseML.
    -message JSON: 

Example:
    `+os.Args[0]+` workflow list --message '{
      "name": "workflowA"
   }'
`, os.Args[0])
}

func workflowRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] workflow register -message JSON

Register a workflow within the FuseML workflow store.
    -message JSON: 

Example:
    `+os.Args[0]+` workflow register --message '{
      "created": "2021-04-09T06:17:25Z",
      "description": "This workflow is just trains a model and serve it",
      "id": "76FB876C-96AC-91E7-BD21-B0C2988DDF65",
      "inputs": [
         {
            "default": "mlflow-example",
            "description": "An MLFlow project codeset",
            "labels": [
               "mlflow-project"
            ],
            "name": "mlflow-codeset",
            "type": "codeset"
         },
         {
            "default": "mlflow-example",
            "description": "An MLFlow project codeset",
            "labels": [
               "mlflow-project"
            ],
            "name": "mlflow-codeset",
            "type": "codeset"
         },
         {
            "default": "mlflow-example",
            "description": "An MLFlow project codeset",
            "labels": [
               "mlflow-project"
            ],
            "name": "mlflow-codeset",
            "type": "codeset"
         },
         {
            "default": "mlflow-example",
            "description": "An MLFlow project codeset",
            "labels": [
               "mlflow-project"
            ],
            "name": "mlflow-codeset",
            "type": "codeset"
         }
      ],
      "name": "TrainAndServe",
      "outputs": [
         {
            "description": "The URL where the exposed prediction service endpoint can be contacted to run predictions.",
            "name": "prediction-url",
            "type": "string"
         },
         {
            "description": "The URL where the exposed prediction service endpoint can be contacted to run predictions.",
            "name": "prediction-url",
            "type": "string"
         }
      ],
      "steps": [
         {
            "env": [
               {
                  "name": "PATH",
                  "value": "/project"
               },
               {
                  "name": "PATH",
                  "value": "/project"
               }
            ],
            "image": "ghcr.io/fuseml/kfserving-predictor:1.0",
            "inputs": [
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               }
            ],
            "name": "predictor",
            "outputs": [
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               }
            ]
         },
         {
            "env": [
               {
                  "name": "PATH",
                  "value": "/project"
               },
               {
                  "name": "PATH",
                  "value": "/project"
               }
            ],
            "image": "ghcr.io/fuseml/kfserving-predictor:1.0",
            "inputs": [
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               }
            ],
            "name": "predictor",
            "outputs": [
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               }
            ]
         },
         {
            "env": [
               {
                  "name": "PATH",
                  "value": "/project"
               },
               {
                  "name": "PATH",
                  "value": "/project"
               }
            ],
            "image": "ghcr.io/fuseml/kfserving-predictor:1.0",
            "inputs": [
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               }
            ],
            "name": "predictor",
            "outputs": [
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               }
            ]
         },
         {
            "env": [
               {
                  "name": "PATH",
                  "value": "/project"
               },
               {
                  "name": "PATH",
                  "value": "/project"
               }
            ],
            "image": "ghcr.io/fuseml/kfserving-predictor:1.0",
            "inputs": [
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               },
               {
                  "codeset": {
                     "name": "mlflow-project",
                     "path": "/project"
                  },
                  "name": "model-uri",
                  "value": "s3://mlflow-artifacts/3/c7ae3b0e6fd44b4b96f7066c66672551/artifacts/model"
               }
            ],
            "name": "predictor",
            "outputs": [
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               },
               {
                  "image": {
                     "dockerfile": "/project/.fuseml/Dockerfile",
                     "name": "registry.fuseml-registry/mlflow-project/mlflow-codeset:0.1"
                  },
                  "name": "model-uri"
               }
            ]
         }
      ]
   }'
`, os.Args[0])
}

func workflowGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] workflow get -message JSON

Retrieve Workflow(s) from FuseML.
    -message JSON: 

Example:
    `+os.Args[0]+` workflow get --message '{
      "workflowNameOrId": "288BFD74-D973-18B5-FAA5-29ADF4569AC7"
   }'
`, os.Args[0])
}
